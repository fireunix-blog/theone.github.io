<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PowerDNS Recursor配置文件</title>
      <link href="//service/use/pdns/crecursor/"/>
      <url>//service/use/pdns/crecursor/</url>
      
        <content type="html"><![CDATA[<p><script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近要开发多数据中心DNS管理平台，目前公司选型使用的是<code>PowerDNS</code>。每个数据中心都部署了一套<code>PowerDNS Recursor</code>，另外部分数据中心部署了<code>PowerDNS Authoritative</code>。其中多个数据中心可能会共用一套<code>Authoritative</code>。 首先简单看了一下Recursor配置，发现配置参数还是挺多的。本着工于利其事，必先利其器的原则，本文章对PowerDNS中的所有参数做了一遍梳理，方便后续开发中使用。</p><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><div class="note orange icon-padding flat"><i class="note-icon fas fa-hand-scissors"></i><ol><li>PowerDNS Recursor: 4.1.16</li><li>CentOS: CentOS Linux release 7.9.2009 (Core)</li></ol></div><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有配置信息可以参考: https://doc.powerdns.com/recursor/yamlsettings.html<span class="comment">#setting-yaml-recursor-config-name</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置后知允许指定子网访问该服务，多个子网之间使用, 分隔</span></span><br><span class="line">allow-from=0.0.0.0/0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置后只允许指定文件中声明的子网访问该服务</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allow-from-file=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">any-to-tcp可选项为:<span class="built_in">yes</span>|no, 当设置为<span class="built_in">yes</span>时，接受到的任何UDP查询都会转换为TCP查询。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当设置为no时，DNS查询首先通过UDP方式，如果响应大于512字节，客户端会自动使用TCP。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">any-to-tcp=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api-config-dir用于指定API文件的配置目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api-config-dir=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api-key用于配置REST API的访问密钥</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api-key=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api-logfile用于记录REST API请求的日志信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api-logfile=/var/log/pdns.log</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api-readonly是否设置REST API为只读权限，可选项为:<span class="built_in">yes</span>|no</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api-readonly=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">auth-zones用于指定权威解析的域名，指定权威域名后不再进行递归解析，相当于让</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Recursor充当权威DNS服务器作用。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">auth-zones=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">carbon-interval指定域名查询统计数据发送到Carbon的时间间隔，主要用来监控性能,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Carbon 是 Graphite 监控系统的组件之一,Graphite 是一个开源的企业级监控工具。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">carbon-interval=30</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">carbon-ourname指定Metrics的前缀，在启用Carbon并且未指定前缀的情况下默认使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hostname左右metrics前缀。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">carbon-ourname=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">carbon-server用于配置Carbon服务器地址，配置后Recursor将发送监控数据到Carbon中。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">carbon-server=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chroot</span>用于指定PowerDNS Recursor进程能够访问的目录，主要目的是为了减少安全风险，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">即使攻击者获取到了进程的权限，也只能访问该目录中的文件(可以试想一下，假设攻击者</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制了进程，并通过进程执行了/bin/bash二进制文件，那么将是一件很危险的事情)。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chroot</span>=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">client-tcp-timeout指定客户端通过TCP连接到服务端的超时时间，该时间内未能完成TCP</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接或者没有任何数据传输，将会终止掉连接。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">client-tcp-timeout=2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">config-dir用于指定PowerDNS Recursor的配置文件目录。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">config-dir=/etc/pdns-recursor</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">config-name当同一服务器运行多个递归进程时，用于指定服务名称，该名称会重命名进程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">名称。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">config-name=ptest</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cpu-map指定PowerDNS线程和CPU的映射关系，可以通过亲和性和线程映射极大的提高PowerDNS</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">性能(比如DPDK一般会设置CPU绑定),因为这样可以减少进程上下文切换。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cpu-map=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">daemon是否设置为守护进程运行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">daemon=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">delegation-only指定哪些域名只接受委派，委派是指DNS不直接解析指定域名下子域的DNS请求，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">而是将DNS</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># delegation-only=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">disable-packetcache是否禁用数据包缓存，禁用后每次查询都会从新查询，但是可以保证结果最</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新，但是同样会增加服务器负担。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">disable-packetcache=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">disable-real-memory-usage 是否禁用真实内存使用报告，主要用来调试和诊断，禁用后仍然会</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">报告内存占用，但是不准确。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">disable-real-memory-usage=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">disable-syslog 是否禁用syslog日志输出，当日志输出到其他目标中时，可以禁用此参数。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">disable-syslog=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">distribution-load-factor 控制查询分配给工作线程的负载因子，这个参数控制查询在不同线程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之间的分配方式，可以实现优化多线程下的工作负载。要开启该功能，pdns-distributes-queries</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数必须设置为<span class="built_in">yes</span>, 并且distribution-load-factor值必须大于0。比如当设置为1.25, 则每个线</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">程的工作负载不会超过平均负载的125%。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">distribution-load-factor=0.0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dnssec 域名系统安全扩展，可以实现验证DNS数据的完整性和真实性，防止DNS欺骗和篡改。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选值为: off/process-no-validate (default)/process/log-fail/validate</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dnssec=process-no-validate</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dnssec-log-bogus 开启后可以记录伪造DNSSEC的日志。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dnssec-log-bogus=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dont-query 开启后可以阻止Recursor向以下的IP地址或子网目标发送DNS请求，主要实现避免向不</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">信任的DNS服务器发送查询请求。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dont-query=127.0.0.0/8, 10.0.0.0/8, 100.64.0.0/10, 169.254.0.0/16, 192.168.0.0/16, 172.16.0.0/12, ::1/128, fc00::/7, fe80::/10, 0.0.0.0/8, 192.0.0.0/24, 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, 240.0.0.0/4, ::/96, ::ffff:0:0/96, 100::/64, 2001:db8::/32</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-cache-limit-ttl 控制客户端子网(ECS)缓存的最大数量，ECS是一种DNS扩展，用于传递客户端子网</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">信息到权威服务器，以便权威服务器能够根据查询客户端子网根据地理位置或网络拓扑返回更合适的响应。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如使用1.1.1.1查询www.baidu.com的ip地址，大概率是要返回一个国外的IP地址，因为百度服务器在</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全球大部分地方是否分布的，但是使用ECS后可以把客户端子网传递到权威服务器，权威服务器根据客户</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">端子网或网络拓扑返回一个最合适的IP地址，大概率是离客户端较近的国内IP地址。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-cache-limit-ttl=0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-ipv4-bits在使用ECS时，用于控制向权威服务器发起请求中客户端子网的掩码长度，掩码值越小，则</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示的地址返回越大，客户端网络信息精密度越小，隐私保护越好。反之相反。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-ipv4-bits=24</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-ipv4-cache-bits 在使用ECS时，当返回目标数据时，对返回的数据做缓存，该参数主要是用来缓存子网</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">的掩码位数。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-ipv4-cache-bits=24</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-ipv6-bits功能和ecs-ipv4-bits相似，但是适用于IPV6地址。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-ipv6-bits=56</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-ipv6-cache-bits 功能和ecs-ipv4-cache-bits相似，但是适用于IPV6地址。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-ipv6-cache-bits=56</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-scope-zero-address ECS中源长度为0时，发送到指定的权威服务器。这个可以和非0的ECS请求做区分，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以提高DNS灵活性和可靠性，如果没有找到合适的地址，则回退到127.0.0.1。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ecs-scope-zero-address=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edns-outgoing-bufsize指定EDNS发送DNS响应的最大缓冲区大小，可以再不同的网络环境修改改参数大小</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用来更好的适配网络环境和客户端。(EDNS协议是对DNS协议的扩展，用于突破原始DNS协议限制，核心的目</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">的就是用来突破传统DNS消息大小512大小限制)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edns-outgoing-bufsize=1680</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edns-subnet-whitelist指定启用EDNS公的子网或域名白名单</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edns-subnet-whitelist=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">entropy-source 指定随机数源，在需要高质量随机数的安全功能(比如DNSSEC签名中)非常重要。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">entropy-source=/dev/urandom</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etc-hosts-file 指定文件路径，该文件包含主机到IP地址的映射，类似于Unix系统中的/etc/hosts</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件，该文件中的记录会优先于递归查询。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etc-hosts-file=/etc/hosts</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">export-etc-hosts 是否导入系统/etc/hosts中的文件使用，如果导入该文件，则Recursor会在查询DNS之前</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">优先尝试使用该文件解析。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">export-etc-hosts=off</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">export-etc-hosts-search-suffix 是否将以下后缀和/etc/hosts结合起来进行匹配查询，比如有一个域名:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">example.com, hosts中存在`192.0.2.1    server`的映射，当查询`server.example.com`时，Recursor将</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回192.0.2.1的结果。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">export-etc-hosts-search-suffix=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">forward-zonesZones 指定特定域名使用特定的上游来解析特定的域名，格式为:域名=上游DNS。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">forward-zones=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">forward-zones-file 类似于forward-zones，但是存放在文件中。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">forward-zones-file=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">forward-zones-recurse类似于forward-zones，但是不同的是forward-zones-recurse会把递归期望设置为</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1,并依赖转发的递归服务器完全解析。也就是说forward-zones-recurse会完全依赖上游DNS完全解析，不会</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遵循子区域的委派规则，那什么是子区域的委派规则呢？在DNS系统中，域名的层次结构由顶级域名(比如.com)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">到次级域名(比如example.com),在到更下一级的子域名(比如sub.example.com)是逐层递归解析的，比如example.com</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">的权威域的区域中可以设置有一个NS记录，指向sub.example.com的权威服务器。正常情况下，Recursor拿到</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sub.example.com的权威服务器后继续请求该权威服务器，但是使用了forward-zones-recurse后，Recursor将</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完全依赖上游DNS服务器来完成整个解析过程，只等待最终返回结果。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">forward-zones-recurse=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gettag-needs-edns-options 开启后，DNS查询会抽取EDNS选项,并传递到ednsoptions表中的gettag()钩子中。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gettag-needs-edns-options=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hint-file 指定根域名服务器地址的文件信息, 指定后将从文件载入根域名服务器。一般来说全球一共有13个</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根域名服务器。每个根域名服务器由不用的运营商运营，每个运营商有多个分布式物理实例，一般通过任播技</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">术分布在全球。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hint-file=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">include-dir指定额外配置文件目录，开启后Recursor会读取该目录中的*.conf文件，并加载文件中配置。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">include-dir=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">latency-statistic-size 指定统计多少个查询用来计算查询的平均延时。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">latency-statistic-size=10000</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定本地监听的地址，可以直接使用IP，也可以使用IP:Port格式，使用`,`分隔多个监听的地址。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">local-address=127.0.0.1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">local-port 指定监听的端口，默认值是53。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">local-port=53</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log-common-errors 当某些DNS查询错误发生比较频繁事，是否记录到日志中。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log-common-errors=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log-rpz-changes 添加或删除RPZ Zones时，使用Info级别来代替Debug记录日志。RPZ:响应策略区域是DNS服务器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集成的功能，允许在DNS解析器在查询返回结果之前，根据定义的策略修改、阻止或重定向响应。RPZ一般的用途是</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安全和内容过滤，比如阻止已知的恶意域名劫持或将也定域名重定向到告警页面。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log-rpz-changes=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log-timestamp是否在日志行中添加时间戳。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log-timestamp=<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">logging-facility 用于记录消息的设施。日志设施用途将消息分类，可以更好的管理和处理系统日志。设施是属于</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">syslog的一部分。可选项可以是:daemon, user, local0, local1 ,但是必须使用数字来代替上述的设施。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">logging-facility=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">loglevel 记录日志级别，级别越高，输出的日志越多，设置的值不要小于3。0 = emergency, 1 = alert, 2 = critical,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3 = error, 4 = warning, 5 = notice, 6 = info, 7 = debug, 如果仅用了quite选项，最小设置为6。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">loglevel=6</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lowercase-outgoing 指定Recursor是否将用户查询信息转换为小写后再向外请求，如果设置为no, 用户查询域名使用了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">大小写混合或者使用了`draft-vixie-dnsext-dns0x20-00`草案，PowerDNS会保留查询的大小写。但是不兼容的权威服务器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可能会返回错误的结果。使用<span class="built_in">yes</span>的话Recursor将查询中的请求数据转换为小写，然后发送给权威服务器，但是Recursor仍</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然会保持大小写返回给客户端。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lowercase-outgoing=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lua-config-file 指定Lua脚本脚本用于扩展和定制PowerDNS的配置信息。该功能可以实现非常强大的功能，具体的使用方法</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以参考官方链接: https://doc.powerdns.com/recursor/lua-config/index.html。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lua-config-file=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lua-dns-script 指定Lua脚本，该Lua脚本可以修改Recursor的解析行为。为了实现该功能，PowerDNS必须内置Lua支持，目前</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官方发布的版本已经提供了支持。使用方法参考官方文档: https://doc.powerdns.com/recursor/lua-scripting/index.html。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># lua-dns-script=</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-cache-entries 配置缓存中可以存储的最大条目数。合理的配置可以避免过多的内存资源占用，同时也可以保持合理的缓存</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命中。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-cache-entries=1000000</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-cache-ttl用于控制缓存目标在内存中保存的最长时间，但是是秒。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># max-cache-ttl=86400</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-mthreadsMtasker最大的线程数量。MTasker是PowerDNS内部的并发库，允许DNS查询在多个线程之间并行处理，可以提高</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PowerDNS的吞吐量。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-mthreads=2048</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-negative-ttl 指定缓存中存储否定响应(即NXDOMAIN和NODATA)的最大生成时间，这种设置可以减少不可解析域名的重复查询。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但是也不要设置过大，过大的设置容易导致否定响应在内存中滞留过久。在目标域名发生变化时导致更新不及时或不准确。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-negative-ttl=3600</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-ns-address-qperq限制单次查询中对每个NS查询数量，比如配置了3，一个域名反了两个NS地址，那么PowerDNS最多会对每个</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NS查询3次。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-ns-address-qperq=10</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-packetcache-entries 配置packetcache中最大的缓存条目数量。Packet Cache和Record Cache和Negative Cache不同的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是缓存粒度不同，Packet Chache缓存完整的DNS响应包。注意缓存包是上游返回的响应包。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-packetcache-entries=500000</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-qperq 限制每个查询中产生的最大查询次数，防止递归过程中生成过多的查询，避免资源滥用和潜在的Dos攻击。备注一下:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面讲到了DNS查询是逐级查询的，所以单次查询一个目标，可能会生成多次额外的查询才能查询到最终结果。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-qperq=50</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-recursion-depth 限制单次查询中递归的最大深度，0表示无限制。递归查询是指只当查询DNS记录时，由于查询不是发生在</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">权威服务器上的，而是依赖上游逐级查询不同级别权威服务器，直到获得最终的DNS记录。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-recursion-depth=40</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-tcp-clients 限制同时处理的最大的TCP客户端连接数。虽然大部分DNS查询都是使用UDP协议查询的，但是某些情况下还是需要</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">依赖TCP协议进行传输。比如响应数据过大，或者特定的DNS客户端要求使用TCP进行传输。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-tcp-clients=128</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-tcp-per-client 限制单个客户端可以建立最大的TCP连接数(是否为同一客户端的判断标准是IP地址)。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-tcp-per-client=0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-tcp-queries-per-connection 限制单个TCP连接可以处理的最大DNS查询次数，主要可以实现单个TCP连接占用过多的资源。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-tcp-queries-per-connection=0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-total-msec 限制每个查询允许占用的最大总时间，主要用来防止单个查询消耗过多的时间，保持DNS服务器能高负载性。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-total-msec=7000</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-udp-queries-per-round 限制recvmsg()单轮循环中UDP DNS查询的最大数量，这个配置有助于在高负载的情况下，防止处理过多</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">的UDP查询导致忽略其他重要的任务，比如调度新线程，处理来自于权威服务器响应或者响应rec_control请求。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max-udp-queries-per-round=10000</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">minimum-ttl-override 用来强制设置DNS记录TTL指定的最小值,当设置的值大于1时虽然违反RFC标准，但在某些情况下会提升</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">性能，在设置为0的情况下，TTL为0的DNS记录会对性能产生巨大的影响，因为Recursor每次解析请求时都会重新请求权威服务器。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">minimum-ttl-override=0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">network-timeout 等待远程权威服务器响应的超时时间，单位为毫秒。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">network-timeout=1500</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no-shuffle 控制DNS响应返回的记录是否随机排序，该选项主要用来做回归测试，不要修改这个值。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no-shuffle=off</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">non-local-bind 即使系统中不存在指定的IP地址，Recursor也会绑定的该地址,该选项主要实现IP故障转移。该选项有可能会掩盖配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">问题，默认情况下是禁用的。如何要启用该功能，必须开启套接字允许绑定非本地地址选项。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">non-local-bind=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nsec3-max-iterations 指定NSEC3允许的最大迭代次数，入伙疏导包含更多迭代NSEC3记录的响应，则DNSSEC验证状态将会被</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">视为不安全。这里介绍一下DNSSEC: 普通的DNS请求是基于无状态的UDP协议，并且不会对响应结果进行检查，这样就会出现容</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">易被攻击的情况。DNSSEC就是对返回的结果做Validation. 具体的流程我会在新的文章中介绍。在没有记录的返回中,攻击者可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">能会构造一个固定的NXDOMAIN就可以完成欺骗。NSEC3是为了解决不存在响应记录提出的规范: 当查询不到不存在的记录时，根</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">据字母顺序返回一条最近的记录，并biang资源指定为NSEC，并在响应记录中添加记录的RRSIG。基于NSEC3协议，攻击者可以完</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">成遍历所有域名。nsec3-max-iterations这个主要是用来指定最大迭代次数。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nsec3-max-iterations=2500</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">packetcache-servfail-ttl 设置在packetcache中缓存解析失败响应的最大时间。单位为秒。注意在4.6.0版本之前，进ServFail</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会被缓存，4.6.0开始所有状态码不是NoError和NXDomain的响应或者在响应中没有记录和权威信息都会被认为是失败。从4.9.0开</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">始，负面回答单独处理，不会被认为是解析失败。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">packetcache-servfail-ttl=60</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">packetcache-ttl 指定缓存项在packetcahce中的最大缓存时间，单位为秒。需要注意的是，即使原始响应中TTL大于该指定值，也</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会强制按照该指定值设置缓存时间。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">packetcache-ttl=3600</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pdns-distributes-queries 开启后Recursor将使用不同的线程箭头客户端套接字。并使用查询的哈希值选择合适的工作线程，如果</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">incoming.reuseport 没有均衡分配查询到多个工作线程，开启该功能应该能提高性能。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pdns-distributes-queries=<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">processes 设置进程数量，目前处于实验性，不要改变该值。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">processes=1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">query-local-address 设置Recursor查询上游DNS服务器的本地源IP地址。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">query-local-address=0.0.0.0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">query-local-address6 设置Recursor查询上游DNS服务器的本地源IP地址。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">query-local-address6=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">quiet开启后日志中不记录请求和响应</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">quiet=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">reuseport 是否开启SO_REUSEPORT选项来实现多个进程监听同一地址。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">reuseport=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root-nx-trust开启后当从根服务器接收到NXDOMAIN的响应时，这个NXDOMAIN响应将被视为整个顶级域不存在，意味着，对于该顶级域</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">的所有查询，递归器将不再继续查询，从而显著减少对根服务器的查询次数。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root-nx-trust=<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">security-poll-suffixPowerDNS可以定时从官方secpoll.powerdns.com获取安全信息，可以通过security-poll-suffix修改默认域名。</span></span><br><span class="line">security-poll-suffix=</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">serve-rfc1918设置RFC 1918私有IP地址权威性，减少对AS112查询。主要是作用就是屏蔽私有IP地址转发到上游公共DNS查询。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">serve-rfc1918=<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server-down-max-fails 如果上游服务器连续超时或者无法请求，在达到server-down-max-fails参数设置中的指定次数后，标记服务器为</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">宕机状态，可以设置为0关闭该功能。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># server-down-max-fails=64</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server-down-throttle-time 如果服务器未以任何形式做出响应，则server-down-throttle-time参数可以设置指定秒内不再向其发送任何</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询，之后Recursor或尝试发送一个新的数据包，如果仍然没有收到任何响应。再次限制指定时间范围内发出请求。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server-down-throttle-time=60</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server-id 当查询包含NSID EDNS0选项时，返回server-id信息, 默认为当前主机名。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server-id=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setgid 设置后可以更改Recursor套接字的组ID，可以提升安全性。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">setgid=pdns-recursor</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setuid 设置后可以更改Recursor套接字的用户ID，可以提升安全性。</span></span><br><span class="line">setuid=pdns-recursor</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">signature-inception-skew 设置DNSSEC签名的时间偏移，主要作用是控制验证DNSSEC签名时，允许的时间偏移量，从而保证签名在特定的时间</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">范围内仍然会被视为有效。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">signature-inception-skew=0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">single-socket开启后Recusor向上游查询使用单一Socket套接字。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># single-socket=off</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">snmp-agent 开启后Recursor将会注册到SNMP中，提供统计信息并发送相关问题。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">snmp-agent=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">snmp-master-socket 开启snmp-agent，设置snmp-master-socket提供给Recursor套接字信息告知如Recursor何注册到SNMP Master中.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">snmp-master-socket=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">soa-minimum-ttl SOA记录的TTL时间，不要修改此配置！！！！</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">soa-minimum-ttl=0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socket-dir 用于管理的套接字和PID文件存贮未知，一般是/var/run或/run。RUNTIME_DIRECTOR环境变量存在值时，默认值会被该变量覆盖。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socket-dir=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socket-group 控制套接字的用户组，可以通过名称指定。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socket-group=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socket-mode控制套接字的权限模式，使用八进制。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socket-mode=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socket-owner 控制套接字的用户，可以使用名称指定。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socket-owner=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">spoof-nearmiss-max spoof-nearmiss-max 参数用于控制 PowerDNS 在检测到错误 ID 的答案次数超过该设置值时，假定其正在遭受欺骗攻击。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这有助于防止 DNS 缓存投毒和其他形式的 DNS 欺骗攻击。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">spoof-nearmiss-max=20</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stack-size 设置每个线程的堆栈大小。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stack-size=200000</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">statistics-interval 设置Recursor统计性能摘要时间间隔,0表示禁用。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">statistics-interval=1800</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stats-ringbuffer-entries 设置环形缓冲区大小，用来保存远程客户端查询Recursor的统计信息。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stats-ringbuffer-entries=10000</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tcp-fast-open设置是否启用TCP快速打开功能。TCP 快速打开是一种用于减少客户端和服务器之间连接建立时间的技术，通过在初始 SYN 数据包中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">包含数据，以减少握手延迟，从而加速连接建立过程。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tcp-fast-open=0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">threads 在Recursor启动时指定线程数量。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">threads=2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">trace是否开启追溯，可选值为: no|<span class="built_in">yes</span>|fail, 注意开启后会生成大量的日志，会带来严重的性能问题，fail表示只记录ServFail日志，但是这种</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">情况仍然会带来较大的性能损耗。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">trace=off</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">udp-truncation-threshold EDNS0允许大型UDP响应数据报文，这种情况下可能会提升性能。但是大报文在反射攻击方面也有缺点，该参数用来指定可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接受报文的最大大小，最大是65535, 但是不要超过4096。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">udp-truncation-threshold=1680</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use-incoming-edns-subnet 设置是否处理并将接收到的 EDNS Client Subnet (ECS) 信息传递给权威服务器, 开启后仍然依赖edns_subnet_allow_list</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数来决定是否发送，只有收到的ECS信息的网络掩码和域名在edns_subnet_allow_list，ECS信息才会被发送。此外如果ECS信息超过IPV4 ipv4_bits</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或IPV6 ipv6_bits的设置，信息会被截断。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use-incoming-edns-subnet=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">version-string 默认情况下Recursor使用版本号恢复<span class="string">&quot;version.bind&quot;</span>查询, 为了保证安全最好做修改。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">version-string=PowerDNS Recursor 4.1.16</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver 是否开启用于REST API的webserver.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver=no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-address webserver监听的IP地址。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-address=127.0.0.1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-allow-from允许访问Webserver的子网或者IP地址。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-allow-from=127.0.0.1,::1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-password 设置Webserver的口令密码。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-password=</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-port 设置Webserver的监听端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webserver-port=8082</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">write-pid 指定PID文件是否应该写入到socket_dir目录中。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">write-pid=<span class="built_in">yes</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> service </category>
          
          <category> use </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PowerDNS </tag>
            
            <tag> Recursor </tag>
            
            <tag> Config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器4-目标伪类选择器</title>
      <link href="//web/css/css/selector-tpseudo/"/>
      <url>//web/css/css/selector-tpseudo/</url>
      
        <content type="html"><![CDATA[<p><script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /></p><h2 id="目标伪类选择器介绍"><a href="#目标伪类选择器介绍" class="headerlink" title="目标伪类选择器介绍"></a>目标伪类选择器介绍</h2><p>前面介绍了动态伪类选择器<a href="/web/css/css/selector-bpseudo/" title="CSS选择器3-动态伪类选择器">CSS选择器3-动态伪类选择器</a>。这边文章主要介绍<code>目标伪类选择器(:target)</code>, 该选择器主要是实现选择URL中指定的目标元素。在一个HTML文档中，当点击一个页面中一个带<code>#</code>符号的链接时，浏览器会滚动到对应的目标元素中。简单的去说就是在HTML页面中，一些URL拥有片段标志符，格式为:<code>#锚点|元素ID</code>，并可以链接到页面的某个特定元素，目标伪类选择器主要选取URL指向的目标元素，并且提供目标元素的样式。</p><h2 id="目标伪类定义"><a href="#目标伪类定义" class="headerlink" title="目标伪类定义"></a>目标伪类定义</h2><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: E:target</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 选择匹配的E元素，并且选择E元素中href属性指向的目标元素。</p></div><h2 id="目标伪类使用示例"><a href="#目标伪类使用示例" class="headerlink" title="目标伪类使用示例"></a>目标伪类使用示例</h2><p>之前在HTML页面中实现一个手风琴效果需要引入JavaScript脚本。下面的例子中实现了一个手风琴的效果。现在通过CSS3可以在不依赖JavaScript脚本的情况就可以实现一个手风琴效果。<br>下面例子中的页面中有三块区域，默认情况下只显示三块区域的标题信息。点击其中任意一个标题，该标题下面的内容会展开，同时其他两个标题下面的内容会收起。这个效果就是一个手风琴效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-US&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS实现手风琴<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;accordionMenu&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menuSection&quot;</span> <span class="attr">id</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#brand&quot;</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menuSection&quot;</span> <span class="attr">id</span>=<span class="string">&quot;promotion&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#promotion&quot;</span>&gt;</span>Promotion<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menuSection&quot;</span> <span class="attr">id</span>=<span class="string">&quot;event&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#event&quot;</span>&gt;</span>Event<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.accordionMenu</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#424242</span>;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span> Arial, Verdana, sans-serif;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#fff</span> transparent transparent;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-tag">h2</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#8f8f8f</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(top, <span class="number">#cecece</span>, <span class="number">#8f8f8f</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, left bottom, <span class="built_in">from</span>(<span class="number">#cecece</span>), <span class="built_in">to</span>(<span class="number">#8f8f8f</span>));</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top, <span class="number">#cecece</span>, <span class="number">#8f8f8f</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(top, <span class="number">#cecece</span>, <span class="number">#8f8f8f</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#424242</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">#aeaeae</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-pseudo">:target</span> <span class="selector-tag">h2</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-tag">h2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-tag">h2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-tag">h2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#2288dd</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(top, <span class="number">#6bb2ff</span>, <span class="number">#2288dd</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, left bottom, <span class="built_in">from</span>(<span class="number">#6bb2ff</span>), <span class="built_in">to</span>(<span class="number">#2288dd</span>));</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top, <span class="number">#6bb2ff</span>, <span class="number">#2288dd</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(top, <span class="number">#8f8f8f</span>, <span class="number">#2288dd</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-tag">h2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-tag">h2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-tag">h2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#2288dd</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(top, <span class="number">#6bb2ff</span>, <span class="number">#2288dd</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, left bottom, <span class="built_in">from</span>(<span class="number">#6bb2ff</span>), <span class="built_in">to</span>(<span class="number">#2288dd</span>));</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top, <span class="number">#6bb2ff</span>, <span class="number">#2288dd</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(top, <span class="number">#6bb2ff</span>, <span class="number">#2288dd</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(top, <span class="number">#6bb2ff</span>, <span class="number">#2288dd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: height <span class="number">0.5s</span> ease-in;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: height <span class="number">0.5s</span> ease-in;</span><br><span class="line">  -o-<span class="attribute">transition</span>: height <span class="number">0.5s</span> ease-in;</span><br><span class="line">  <span class="attribute">transition</span>: height <span class="number">0.5s</span> ease-in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-pseudo">:target</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.accordionMenu</span> <span class="selector-pseudo">:target</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent transparent <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:</p><iframe id="cp_embed_MWPKbvX" src="//codepen.io/mscuti/embed/MWPKbvX?height=500&theme-id=dark&slug-hash=MWPKbvX&default-tab=result" scrolling="no" frameborder="no" height="500" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目标伪类也是一个CSS中非常实用的伪类。通过目标伪类可以实现一些非常实用的效果，比如手风琴效果、锚点跳转等。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器3-动态伪类选择器</title>
      <link href="//web/css/css/selector-bpseudo/"/>
      <url>//web/css/css/selector-bpseudo/</url>
      
        <content type="html"><![CDATA[<p><script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /></p><h2 id="伪类选择器介绍"><a href="#伪类选择器介绍" class="headerlink" title="伪类选择器介绍"></a>伪类选择器介绍</h2><p>伪类是一种选择元素在特定状态下的CSS选择器，从一个HTML元素的状态来看的话，HTML文档大部分的元素都会有自身的状态，比如HTML中的超链接元素，超链接元素还能处于不同的状态，比如鼠标滑过超链接、超链接还未被访问过、超链接已经被访问过等状态。CSS规定了针对元素状态的选择器，这中根据元素状态的选择器就被称为<code>伪类选择器</code>。 比如常见的伪类选择器: <code>:link</code>、<code>:visited</code>、<code>:hover</code>、<code>:active</code>。在CSS3版本中，伪类选择器分为了6种:</p><ol><li>动态伪类选择器。</li><li>目标伪类选择器。</li><li>语言伪类选择器。</li><li>UI状态伪类选择器。</li><li>结构伪类选择器。</li><li>否定伪类选择器。</li></ol><h2 id="动态伪类介绍"><a href="#动态伪类介绍" class="headerlink" title="动态伪类介绍"></a>动态伪类介绍</h2><p>一些伪类只会在用户以某种方式和HTML文档交互的时候才能体现出来，这些用户行为产生的伪类就被称为动态伪类。具体的表现是用户和元素交互时候这些元素像是动态添加了一些类(class)属性。动态伪类早在CSS3之前版本就存在。需要注意的这些伪类并不存在于HTML文档中。</p><h3 id="动态伪类-链接伪类link"><a href="#动态伪类-链接伪类link" class="headerlink" title="动态伪类-链接伪类link"></a>动态伪类-链接伪类link</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: E:link</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 选择匹配的E元素，并且匹配的元素的超链接未被访问过。</p></div><h3 id="动态伪类-链接伪类visited"><a href="#动态伪类-链接伪类visited" class="headerlink" title="动态伪类-链接伪类visited"></a>动态伪类-链接伪类visited</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: E:visited</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 选择匹配的E元素，并且匹配的元素的超链接已经被访问过。</p></div><h3 id="动态伪类-行为伪类active"><a href="#动态伪类-行为伪类active" class="headerlink" title="动态伪类-行为伪类active"></a>动态伪类-行为伪类active</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: E:active</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 选择匹配的E元素，并且匹配的元素被激活。</p></div><h3 id="动态伪类-行为伪类hover"><a href="#动态伪类-行为伪类hover" class="headerlink" title="动态伪类-行为伪类hover"></a>动态伪类-行为伪类hover</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: E:hover</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 选择匹配的E元素，并且用户鼠标停留在元素E上。</p></div><h3 id="动态伪类-行为伪类focus"><a href="#动态伪类-行为伪类focus" class="headerlink" title="动态伪类-行为伪类focus"></a>动态伪类-行为伪类focus</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: E:focus</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 选择匹配的E元素，并且匹配的元素获得了焦点。</p></div><h2 id="动态伪类使用示例"><a href="#动态伪类使用示例" class="headerlink" title="动态伪类使用示例"></a>动态伪类使用示例</h2><p>下面的例子中定义了一个按钮，并且在常见的行为状态下: <span class='p red'>默认状态</span>、<span class='p purple'>悬浮状态</span>、<span class='p green'>点击时状态</span>、 <span class='p cyan'>焦点状态</span>、<span class='p blue'>获取焦点状态</span>使用CSS3的动态伪类选择器设置了不同状态下的不同样式风格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-US&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用动态伪类选择器美化网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;download-info&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>在Github上查看项目<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.download-info</span> &#123;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#0074cc</span>;</span><br><span class="line"> *<span class="attribute">background-color</span>: <span class="number">#0055cc</span>;</span><br><span class="line"> <span class="attribute">background-image</span>: <span class="built_in">-ms-linear-gradient</span>(top, <span class="number">#0088cc</span>, <span class="number">#0055cc</span>);</span><br><span class="line"> <span class="attribute">background-image</span>: <span class="built_in">-webkit-gradient</span>(linear, <span class="number">0</span> <span class="number">0</span>, <span class="number">0</span> <span class="number">100%</span>, <span class="built_in">from</span>(<span class="number">#0088cc</span>),<span class="built_in">to</span>(<span class="number">#0055cc</span>));</span><br><span class="line"> <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(top, <span class="number">#0088cc</span>, <span class="number">#0055cc</span>);</span><br><span class="line"> <span class="attribute">background-image</span>: <span class="built_in">-o-linear-gradient</span>(top, <span class="number">#0088cc</span>, <span class="number">#0055cc</span>);</span><br><span class="line"> <span class="attribute">background-image</span>: <span class="built_in">-moz-linear-gradient</span>(top, <span class="number">#0088cc</span>, <span class="number">#0055cc</span>);</span><br><span class="line"> <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(top, <span class="number">#0088cc</span>, <span class="number">#0055cc</span>);</span><br><span class="line"> <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line"> <span class="attribute">display</span>: inline-block;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#cccccc</span>;</span><br><span class="line"> *<span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">border-color</span>: <span class="number">#ccc</span>;</span><br><span class="line"> <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>) <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>) <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.25</span>);</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line"> <span class="attribute">cursor</span>: pointer;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">font-weight</span>: normal;</span><br><span class="line"> <span class="attribute">filter</span>: progid:dximagetransform.microsoft.<span class="built_in">gradient</span>(startcolorstr=<span class="string">&#x27;#0088cc&#x27;</span>, endcolorstr=<span class="string">&#x27;#0055cc&#x27;</span>, GradientType=<span class="number">0</span>);</span><br><span class="line"> <span class="attribute">filter</span>: progid:dximagetransform.microsoft.<span class="built_in">gradient</span>(enabled=false);</span><br><span class="line"> <span class="attribute">line-height</span>: normal;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">24px</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"> <span class="attribute">text-shadow</span>: <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.25</span>);</span><br><span class="line"> <span class="attribute">text-decoration</span>: none;</span><br><span class="line"> <span class="attribute">vertical-align</span>: middle;</span><br><span class="line"> *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬浮在按钮上效果 */</span></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#0055cc</span>;</span><br><span class="line"> *<span class="attribute">background-color</span>: <span class="number">#004ab3</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line"> <span class="attribute">text-decoration</span>: none;</span><br><span class="line"> <span class="attribute">text-shadow</span>: <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.25</span>);</span><br><span class="line"> -webkit-<span class="attribute">transition</span>: background-position <span class="number">0.1s</span> linear;</span><br><span class="line"> -moz-<span class="attribute">transition</span>: background-position <span class="number">0.1s</span> linear;</span><br><span class="line"> -o-<span class="attribute">transform-origin</span>: background-position <span class="number">0.1s</span> linear;</span><br><span class="line"> <span class="attribute">transition</span>: background-position <span class="number">0.1s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标点击按钮效果 */</span></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#0055cc</span>;</span><br><span class="line"> *<span class="attribute">background-color</span>: <span class="number">#004ab3</span>;</span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#004099</span> \<span class="number">9</span>;</span><br><span class="line"> <span class="attribute">background-image</span>: none;</span><br><span class="line"> <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.15</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>);</span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按钮获取焦点效果 */</span></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line"> <span class="attribute">outline</span>: thin dotted <span class="number">#333</span>;</span><br><span class="line"> <span class="attribute">outline</span>: <span class="number">5px</span> auto -webkit-focus-ring-color;</span><br><span class="line"> <span class="attribute">outline-offset</span>: -<span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:<br><iframe id="cp_embed_dygYRyv" src="//codepen.io/mscuti/embed/dygYRyv?height=200&theme-id=dark&slug-hash=dygYRyv&default-tab=result" scrolling="no" frameborder="no" height="200" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的例子中涉及了一些CSS3的特性，暂时不做讨论。动态伪类选择器是一直种常见的CSS选择器，一般用来在页面上设置用户的交互效果。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器2-层次选择器</title>
      <link href="//web/css/css/selector-relation/"/>
      <url>//web/css/css/selector-relation/</url>
      
        <content type="html"><![CDATA[<p><script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /></p><h2 id="层次选择器介绍"><a href="#层次选择器介绍" class="headerlink" title="层次选择器介绍"></a>层次选择器介绍</h2><p>上一篇文章提到了CSS基本选择的使用：<a href="/web/css/css/selector/" title="CSS选择器1-基本选择器">CSS选择器1-基本选择器</a>。除了基本的选择器之外，CSS3同样提供了<code>层次选择器</code>选择元素。<code>层次选择器</code>通过HTML文档中DOM元素间的层次关系获取元素。在一个有效的HTML文档中，层次关系如下:</p><ol><li>后代关系</li><li>父子关系</li><li>相邻兄弟</li><li>通用兄弟<br>再CSS3中可以通过以上定义的元素之间关系快速选择需要的元素。</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><iframe id="cp_embed_dygowOa" src="//codepen.io/mscuti/embed/dygowOa?height=500&theme-id=dark&slug-hash=dygowOa&default-tab=result" scrolling="no" frameborder="no" height="500" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: E F</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 选择匹配的F元素，并且匹配的F元素被包含在E元素内。</p></div><p>后代选择器(E F)也被称为包含选择器， 作用就是可以选择某元素的后代元素，比如<code>E F</code>, 其中<code>E</code>为祖先元素，<code>F</code>为后代元素，表达的意思就是选择<code>E</code>元素的所有后代<code>F</code>元素，这里的<emp>F元素不管是E元素的子元素、孙辈元素或者更深层次的包含关系，都会被选中</emp>。下面的例子中使用了后代选择器改变DIV子元素的背景颜色:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">....此处省略....</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:<br><iframe id="cp_embed_qBJdgaB" src="//codepen.io/mscuti/embed/qBJdgaB?height=500&theme-id=dark&slug-hash=qBJdgaB&default-tab=result" scrolling="no" frameborder="no" height="500" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: E &gt; F</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 选择匹配的F元素，并且匹配的F元素是E的子元素。</p></div><p>子选择器(E &gt; F)只能选择某元素的子元素，其中<code>E</code>为父元素，<code>F</code>为子元素，<code>E&gt;F</code>表示选择了<code>E</code>元素下的所有子元素<code>F</code>, 子元素选择器和后代选择器不一样的支出在于: <emp>后代选择器选择E下面所有的F元素，不管F元素跨了几代，而子元素选择器指示选择E下面所有的F子元素</emp>。下面是通过选择子元素修改DIV元素的背景色:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">....此处忽略....</span><br><span class="line"><span class="selector-tag">body</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:<br><iframe id="cp_embed_qBJdvWR" src="//codepen.io/mscuti/embed/qBJdvWR?height=500&theme-id=dark&slug-hash=qBJdvWR&default-tab=result" scrolling="no" frameborder="no" height="500" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: E &gt; F</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 选择匹配的F元素，并且匹配的F元素紧位于E元素后面，注意兄弟选择器只会选择一个元素。</p></div><p>相邻兄弟选择器(E + F)可以选择紧接着一个元素后的另外一个元素。这两个元素具有相同的父元素，换句话说，<code>E</code>元素和<code>F</code>元素是同辈，<code>F</code>元素在<code>E</code>元素的后面，并且紧邻。必须注意的一点是，F元素必须在E元素之后，如果E和F元素之间存在其他任何元素都会导致无法正确选择元素。下面是相邻兄弟选择器例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">....此处省略....</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">....此处省略....</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.active</span> + <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: lime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:<br><iframe id="cp_embed_NWOqJpm" src="//codepen.io/mscuti/embed/NWOqJpm?height=500&theme-id=dark&slug-hash=NWOqJpm&default-tab=result" scrolling="no" frameborder="no" height="500" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h3 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a>通用兄弟选择器</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: E ~ F</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 选择匹配的F元素，并且匹配的F元素位于E元素后面。</p></div><p>通用兄弟选择器时(E~F)是CSS3中新增的选择器，用于选择指定元素后面所有的兄弟元素。和相邻兄弟不同的是:<emp>相邻兄弟选择器只选择紧挨着指定元素(E)的后的某个元素(F)，而通用兄弟选择器选择在指定元素(E)后的所有符合条件的元素(F), 也就是说E和F是同辈元素，满足F元素在E元素之后。并且允许E元素和F元素之间存在其他元素</emp>。下面是通用兄弟选择器的例子:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.active</span> ~ <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:<br><iframe id="cp_embed_XWxbGqp" src="//codepen.io/mscuti/embed/XWxbGqp?height=500&theme-id=dark&slug-hash=XWxbGqp&default-tab=result" scrolling="no" frameborder="no" height="500" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CSS提供的层次选择器弥补了基本选择器的不足，对于选择HTML元素这种行为能力得到了进一步扩展，在实际使用中也会经常用到层次选择器。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器1-基本选择器</title>
      <link href="//web/css/css/selector/"/>
      <url>//web/css/css/selector/</url>
      
        <content type="html"><![CDATA[<p><script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /></p><h2 id="CSS选择器介绍"><a href="#CSS选择器介绍" class="headerlink" title="CSS选择器介绍"></a>CSS选择器介绍</h2><p>在一个网页中，想要把某种样式应用于指定的HTML元素，就要先找到HTML元素。在CSS中规定了查找HTML元素的规则，在CSS中执行查找元素的对象被称为<code>CSS选择器</code>。CSS选择器是CSS的根基，但是需要知道的是: CSS选择器不能改动HTML结构。目前CSS的主流版本为CSS3，最终的规范是在2011年6月份发布的。CSS3选择器在常规选择器的基础上增加了属性选择器、伪类选择器，过滤选择器。可以再开发过程中减少对HTML类名和ID名以及HTML元素结构的依赖，从而对选择HTML元素变得更加简单。从整体上来说选择器分类如下:</p><ol><li>基本选择器</li><li>层次选择器</li><li>伪类选择器<ul><li>动态伪类选择器</li><li>目标伪类选择器</li><li>语言伪类选择器</li><li>UI元素状态伪类选择器</li><li>结构伪类选择器</li><li>否定伪类选择器</li></ul></li><li>伪元素选择器</li><li>属性选择器</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><iframe id="cp_embed_JjmdKEy" src="//codepen.io/mscuti/embed/JjmdKEy?height=450]&theme-id=dark&slug-hash=JjmdKEy&default-tab=[result,html,css" scrolling="no" frameborder="no" height="450]" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><h3 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: *</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 选择文档中所有的HTML元素。</p></div><p>通配选择器用来选择所有的元素，除此之外可以选择指定元素下的所有子元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.demo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none outside none;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f36</span>;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的<code>* &#123;margin:0; padding:0;&#125;</code> 就是使用了通配选择器来选择HTML中的所有元素。<code>* &#123;margin:0; padding:0;&#125;</code>这个声明会经常在Reset样式文件中使用，表示所有的元素的<code>margin</code>和<code>padding</code>都设置为<code>0</code>,下面的例子中通过使用通配选择符选择demo下的所有子元素，并设置背景颜色为橙色:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">..... 此处省略 .....</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.demo</span> * &#123;</span><br><span class="line">    <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:<br><iframe id="cp_embed_rNqVLYj" src="//codepen.io/mscuti/embed/rNqVLYj?height=200&theme-id=dark&slug-hash=rNqVLYj&default-tab=result" scrolling="no" frameborder="no" height="200" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: 元素名</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 根据指定的元素类型选择元素。</p></div><p>元素选择器(E)是CSS选择器中最常见也是最基本的选择器，一个HTML文档中的元素都可以使用选择选择器来选择，比如下面的例子中通过标签选择器选择ul元素，并设置背景为灰色:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.... 此处省略 ....</span><br><span class="line"><span class="selector-tag">ul</span> &#123;<span class="attribute">background</span>: grey;&#125;</span><br></pre></td></tr></table></figure><p>效果:<br><iframe id="cp_embed_gOBpMBJ" src="//codepen.io/mscuti/embed/gOBpMBJ?height=200&theme-id=dark&slug-hash=gOBpMBJ&default-tab=result" scrolling="no" frameborder="no" height="200" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: #ID属性值</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 根据指定的ID值选择元素。</p></div><p>ID选择器也是常用的一种元素选择器，在使用ID选择器之前，需要在HTML文档中给指定的元素设置ID属性并设置对应的值。ID选择器具有唯一性，在一个HTML页面中不会出现相同的ID值。在CSS样式中使用ID选择器时，需要在在ID属性值的前面加上<code>#</code>符号，比如(#id), 在上面的代码定义中，列表中的第一个元素和最后一个元素都分别定义了id, ID对应的值分别是<code>first</code>和<code>last</code>。下面的例子中使用了ID选择器修改列表中第一个元素的背景色，并设置最后一个元素的前景色:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">....此处忽略....</span><br><span class="line"><span class="selector-id">#first</span> &#123;<span class="attribute">background</span>: lime; <span class="attribute">color</span>:<span class="number">#000</span>&#125;</span><br><span class="line"><span class="selector-id">#last</span> &#123;<span class="attribute">background</span>: <span class="number">#000</span>; <span class="attribute">color</span>:lime&#125;</span><br></pre></td></tr></table></figure><p>效果:<br><iframe id="cp_embed_ZEqGpLv" src="//codepen.io/mscuti/embed/ZEqGpLv?height=200&theme-id=dark&slug-hash=ZEqGpLv&default-tab=result" scrolling="no" frameborder="no" height="200" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: .class || .class1.class2</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 根据指定的class值选择元素。</p></div><p>类选择器(.class)时一独立于文档元素的的方式指定元素样式。使用方法与ID选择非常类型，首选需要再HTML文档中给指定的元素定义class属性，并设置class的值。和ID不同的是: 一个页面中可以包含多个相同的类名，但是ID在一个页面中只能是唯一的。下面的例子中展示了使用类选择器来修改元素样式:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    ....此处忽略....</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">    <span class="attribute">color</span>: # fff;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:<br><iframe id="cp_embed_bGmdwMq" src="//codepen.io/mscuti/embed/bGmdwMq?height=200&theme-id=dark&slug-hash=bGmdwMq&default-tab=result" scrolling="no" frameborder="no" height="200" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><br>除了上面的类选择器简单实用方法之外，类选择器还支持选择多个类，通过两个或者两个以上类选择器合并，来确定元素:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span><span class="selector-class">.important</span> &#123;</span><br><span class="line">    ....此处忽略....</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:<br><iframe id="cp_embed_bGmdBMj" src="//codepen.io/mscuti/embed/bGmdBMj?height=200&theme-id=dark&slug-hash=bGmdBMj&default-tab=result" scrolling="no" frameborder="no" height="200" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h3 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-hippo"></i><p>定义: 选择器1,选择器2,….</p></div><div class="note success icon-padding flat"><i class="note-icon fas fa-dragon"></i><p>描述: 使用多个不同的选择器选择元素，选择器之间不是互斥的！。</p></div><p>群组选择器支持使用多个不同筛选条件选择元素，只要被筛选的元素符合其中一个条件就能被筛选。下面是使用例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">....此处省略....</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;clearfix demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;important item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;important&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;multi1&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;multi2&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;last&quot;</span> <span class="attr">id</span>=<span class="string">&quot;last&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">....此处省略....</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">....此处忽略....</span><br><span class="line"><span class="selector-class">.multi1</span>,<span class="selector-id">#multi2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:<br><iframe id="cp_embed_GRYJBeL" src="//codepen.io/mscuti/embed/GRYJBeL?height=200&theme-id=dark&slug-hash=GRYJBeL&default-tab=result" scrolling="no" frameborder="no" height="200" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是CSS3中提供的基础选择器，基础选择器可以实现大部分元素的选择功能，但是面对复杂的HTML元素选择关系，基本选择器并不能100%覆盖，所以在CSS中提供了更高级的选择器，后面将继续对选择器展开介绍。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP数据包分析</title>
      <link href="//network/tcp/tcppacket/"/>
      <url>//network/tcp/tcppacket/</url>
      
        <content type="html"><![CDATA[<p><script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><br>TCP数据包一般也被叫做数据报文，只要使用了TCP协议在设备之间传输数据就会一定遵循TCP数据包格式，这种通用的格式可以保证数据在不同系统、不同设备上以约定好的格式来传输数据。同时TCP处于<a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B">OSI七层网络模型</a>中的第四层，所以应用层的的协议都是通过四层协议来传输数据的。如果说OSI的三层实现了通过互联网跨机器传输数据，那么可以认为四层实现了传输数据统一格式(通过TCP、UDP等协议)。本篇文章主要分析TCP数据包格式，目的如下:<br><div class="note purple icon-padding flat"><i class="note-icon fas fa-fan"></i><ol><li>了解并且数据TCP数据包格式</li><li>通过抓包方式分析TCP数据包</li></ol></div><br>用到工具:<br><div class="note orange icon-padding flat"><i class="note-icon fas fa-hand-scissors"></i><ol><li>WireShark: 一般在本地环境分析数据, 支持Mac、Windows、Linux Desktop(Linux Server可以用tshark)</li><li>TCPdump: 一般用在服务端分析数据，用于定位问题，支持Mac、Linux</li></ol></div></p><h2 id="TCP数据包头"><a href="#TCP数据包头" class="headerlink" title="TCP数据包头"></a>TCP数据包头</h2><div class="note primary flat"><p>TCP数据包格式图</p></div>  <p><img src="/images/tcppacket/tcpheader.png" alt="TCP协议数据头部格式" title="TCP协议数据头部格式"><br><div class="note info flat"><p>info 代码定义</p></div></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* TCP头定义，共20个字节 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">TCP_HEADER</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> <span class="type">short</span> m_sSourPort;                         <span class="comment">// 源端口号16bit</span></span><br><span class="line"> <span class="type">short</span> m_sDestPort;                         <span class="comment">// 目的端口号16bit</span></span><br><span class="line"> <span class="type">unsigned</span> <span class="type">int</span> m_uiSequNum;       　　       <span class="comment">// 序列号32bit</span></span><br><span class="line"> <span class="type">unsigned</span> <span class="type">int</span> m_uiAcknowledgeNum;          <span class="comment">// 确认号32bit</span></span><br><span class="line"> <span class="type">short</span> m_sHeaderLenAndFlag;                <span class="comment">// 前4位：TCP头长度；中6位：保留；后6位：标志位</span></span><br><span class="line"> <span class="type">short</span> m_sWindowSize;       　　　　　      <span class="comment">// 窗口大小16bit</span></span><br><span class="line"> <span class="type">short</span> m_sCheckSum;        　　　　　       <span class="comment">// 检验和16bit</span></span><br><span class="line"> <span class="type">short</span> m_surgentPointer;      　　　　     <span class="comment">// 紧急数据偏移量16bit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="头部格式说明"><a href="#头部格式说明" class="headerlink" title="头部格式说明"></a>头部格式说明</h3><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>下面是是头部数据结构总览，后面会对重要字段详细解释。</p></div><p>在TCP头部前20个字节大小固定，为TCP数据包的固定首部。</p><ul><li><p>源端口: 位于TCP数据包头部0-15的位置,占用两个字节,记录了发送数据端套接字端口号。</p></li><li><p>目的端口: 位于TCP数据包头部16-31的位置,占用两个字节,记录了数据接受套接字端口号。</p></li><li><p>报文序号: 位于TCP数据包头部，占用四个字节，也就是32位。使用报文中第一个数据字节的序列号表示报文序列号。</p></li><li><p>确认号: 发送数据方期望收到的数据段序号，用于确认发送方确认报文送达。</p></li><li><p>数据偏移: 也被称为首部长度，占用4位，用来标记TCP协议头部长度。</p></li><li><p>保留字段: 占用6位，为TCP发展预留空间，<del>目前必须全部为0</del>，老版tcp头部预留6位，新版预留3位。</p></li><li><p>标志位: 占用6位，用来指示TCP会话中发送发或接受方根据标志位正确处理会话。</p></li><li><p>窗口: 也被称为滑动窗口，占用16位，最大位65535, 告知发送端接收端缓存大小，控制发送端发送速率，控制流量。</p></li><li><p>校验和: 占用两个字节，16位，对TCP报文(包括头部)校验，用于验证数据的正确性。</p></li><li><p>紧急指针: 占用16位，配置URG=1时使用，紧急指针声明了紧急数据结束位置，用于发送紧急数据。</p></li><li><p>选项填充: 用于声明TCP报文中的更多信息，长度可变，最大为40字节，在设置完选项后，填充保证头部大小为32的倍数。</p></li></ul><h3 id="报文序号详解"><a href="#报文序号详解" class="headerlink" title="报文序号详解"></a>报文序号详解</h3><div class="note success flat"><p>序号是为了接收方能够按照正确的顺序接受数据。</p></div><p> 位于TCP数据包头部，占用四个字节，也就是32位。序号用来标记数据传输顺序，因为不管任何数据类型都会在传输层转换成字节流，举个例子，如果要发送一个字符串<code>Hello</code>，在传输层这个字符串有可能被拆分成两部分字节数据分别传输, 比如上面的字符串被拆分成了<code>He</code>和<code>llo</code>(为了方便解释，这个地方用字符串代替字节)，在实际的传输过程因为用户终端或者是网络设备、环境等因素是无法保证传输顺序正确性，此时数据接收方就会使用这个32位的序号来判断数据传输的顺序(一般在开发中不会关注这些信息，因为操作系统网络栈中实现了数据正确性的校验)。</p><p> 序号的取值范围为2的32次方。在建立的TCP连接中，会为传送的字节流中的每一个字节按照顺序编号，也就是说从建立TCP连接开始到TCP连接端接这个生命周期中，只要涉及到传输数据，数据中的每一个字节都会被编号，这个序号被称为字节序号。  </p><p> 当TCP连接被建立以后，第一个字节数据的序号被称为ISN(Initial Sequence Number), 也就是初始化序号, 初始化的ISN并不一定为1，在RFC中规定，ISN的是根据时间分配的(具体的实现要以操作系统为准)，当操作系统初始化时，存在一个全局变量假设为:<code>g_number</code>会被初始化为1(或者为0)，每个4us加1, 当g_number达到最大值时会被重新初始化为0，当一旦有新的TCP连接创建时，<code>g_number</code>的值就会被赋值给ISN。</p><p> 在整个TCP生命周期中，初始化序号是一个非常重要步骤，双方互相告第一个报文段是谁，TCP之所以被称为是安全的连接，就是通过序号保证了数据传输的安全，TCP三次握手就是为了初始化序号。报文序号只有在下面两种情况中的任意才会存在意义:  </p><ul><li>报文数据字段至少包含一个字节</li><li>报文是SYN段或FIN段或RST段</li></ul><div class="admonition warning"><p class="admonition-title">TCP序列号复用问题</p><p>在TCP中定义的序号位数只有32位，也就是如果在建立的一个会话中传输的数据量大于2的32次方字节，TCP会话会如何使用序号呢，答案就是复用序号:也就是TCP会话会重置序号，来保证序号仍然保持在2的32次方范围内，但是此时会带来一个问题: 一个高速传输数据的会话中(比如10/40G网络中数据传输速度很快,序号很快就会达到最大值限制)，是如何告知数据接收方该序号是客户端失败重发的序号还是序号重置之后用于发送新数据的序号呢? 在<a href="http://tools.ietf.org/html/rfc1323">RFC 1323</a>提出了PAWS(Protect Against Wrapped Sequence Number)协议，简单的来说就是通过增加了时间戳的方式来保证序号的唯一性(因为时间戳是线性增长的),后面我会单独写一篇文章来了解一些PAWS协议!</p></div><h3 id="报文确认号详解"><a href="#报文确认号详解" class="headerlink" title="报文确认号详解"></a>报文确认号详解</h3><div class="note success flat"><p>确认号是为了让发送方知道接收方已经接收到了数据。</p></div><p>在TCP发送端发送数据到接收方之后，发送端每发送一个TCP段，服务端都要回复确认号来表示数据已经收到了来自于发送方的数据。比如发送方发送了报文，其中序列号为:<code>101</code>, 传输的数据为:<code>100字节</code>，如果接收方成功返回确认号，那么接收方就会返回确认号为:<code>201</code>, 表示服务端接下来期望接收字节序号为<code>201</code>以及以后的数据。  </p><p>同时TCP协议支持<code>累计确认</code>的方法: 对于连续传输的报文，可以只对报文中的最后一个TCP段进行确认, 表示确认号之前的数据已经成功接收，比如发送方发送了三个数据包，包1包含字节:<code>0-10</code>, 包2包含字节:<code>11-20</code>, 包3包含的字节:<code>21-20</code>, 那么只要接收方回复了确认号21，就表示包1和包2已经接收成功。 之所以这样设计，是因为数据报文可能会丢失，应答的报文也可能产生丢失，累计确认的目的就是为了避免确认号回复在网络链路中丢失导致数据重新传输。</p><h3 id="数据偏移详解"><a href="#数据偏移详解" class="headerlink" title="数据偏移详解"></a>数据偏移详解</h3><div class="note success flat"><p>数据偏移用来表示报文中传输数据的真实位置。</p></div><p>TCP数据包中的数据偏移表示TCP中真正传输的数据距离TCP头部的距离，数据偏移在头部占用<code>4位(0-15)位</code>，单位为32位，也就是四个字节，每一个偏移都可以表示4个字节的偏移。之所以TCP头部存在数据偏移，是因为TCP<code>选项</code>中的内容是根据实际使用情况确定的, 所以TCP头部必须存在数据偏移。数据偏移最大表示为<code>15</code>，每一个偏移都表示为<code>4个字节</code>，所以在一个TCP报文中，最大的偏移量为:<code>15*4=60字节</code>(其中前20个偏移量是固定的)。TCP首部长度范围在:<code>20-60字节</code>之间。同时选项中数据长度不固定并且偏移量是以<code>4字节</code>为一个单位的，所以在填充中必须在在填充之后和选项内容为<code>32的倍数</code>(这里是位为单位，也就是<code>4字节</code>的倍数)。</p><h3 id="报文标志位"><a href="#报文标志位" class="headerlink" title="报文标志位"></a>报文标志位</h3><div class="note success flat"><p>报文标志位是非常重要的内容，一个TCP会话建立连接到数据传输到最终连接关闭都离不开标志位参与。</p></div><p>在TCP传输中每个TCP报文都会有一个目的，至于是什么目的就需要借助TCP标志位来确定，比如TCP在握手、挥手、传输数据过程中每个标志位也是不一样的。</p><ul><li><p><span class='p gray'>URG:</span> 紧急指针，该Flag需要配合16位紧急指针一起使用，其中指针数据用来指示数据包中紧急数据中最后一个字节的下一个字节，也就说当启用了<code>URG</code>之后，会通知接受方数据包中从<code>0</code>开始到<code>指针指向位置结束</code>的内容为紧急数据, 接收方接受到紧急数据会将该数据保存到单独的缓冲区，并且告知应用程序有紧急数据可用，应用程序可以通过设置<code>recv(int sockfd, void *buf, size_t len, int flags)</code>方法中的<code>flags</code>标志位来读取这些紧急数据。在<code>FTP协议</code>中用到了<code>URG</code>，<code>FTP</code>即可以执行命令也可以传输数据，如果<code>FTP</code>一直忙于传输数据就会导致命令阻塞，通过设置<code>URG</code>状态，系统会中断数据传输，通知FTP服务接受到了紧急数据。除此之外，<code>URG</code>使用的情况很少，大部分应用程序是不支持的。</p></li><li><p><span class='p green'>ACK:</span> 该Flag用于通知发送方接收方已经接收到了发送方发送的数据，在大多数情况下，对于发送或接受的每个数据包，都做进行确认。</p></li><li><span class='p red'>PSH:</span> 在了解`PSH` Flag之前必须简单了解一下`MTU`、`MSS`、`窗口`和`TCP中缓冲区`运行机制，区分`MTU`、`MSS`、`窗口作用`: <div class="tabs" id="mtu"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mtu-1">MTU</button></li><li class="tab"><button type="button" data-href="#mtu-2">MSS</button></li><li class="tab"><button type="button" data-href="#mtu-3">窗口</button></li><li class="tab"><button type="button" data-href="#mtu-4">TCP缓冲区</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mtu-1"><p>MTU(Maximum Transmission Unit)是指网络层(第三层)中传输的最大数据报单元，MTU一般由数据链路层(二层)设备决定。简单的来说就是物理接口提供给上层最大一次传输数据的大小。比如在以太网中，默认MTU的值为1500字节，如果在三层要发送的IP数据包大于1500字节，则必须把IP数据包进行分片传输，如果发送的IP数据包小于等于1500字节，那么就只需要一个数据包就可以完成发送。这里需要特别注意的有三点:</p><ul><li>传输层提供的是一种不可靠的传输方式，也就是在传输过程中丢失了一个包，传输层无法发现丢失的这个包，应用层即使发现传输失败，也只能重传整个IP包。</li><li>MTU可以被被修改，但是无论设备是处于二层还是处于三层，都需要配置端到端沿途所有的设备，IP包只要大于沿途中任何一个设备的MTU，那么设备就会把IP包做分片处理<img src="/images/tcppacket/mtu.jpeg" alt="MTU分片"></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mtu-2"><p>MSS(Maximum Segment Size)是指数据传输层(第四层)数据报文中payload的长度，在MTU=1500字节的网络上传输数据是，MSS=1500-IP头部长度-TCP头部长度。该功能实现了传输层分片功能。当TCP层要传输的数据大于MSS时，传输的数据就会被分片传输。之所以存在MSS，目的就是实现四层对数据分片，避免数据在三层分片。举个例子: 如果一个数据包为10000，在不使用MSS的情况下，该数据会在三层拆分多个包发送，如果传输过程中一个包丢失，长度为10000的整个数据包就会重新传输。如果使用了MSS，该数据就会在四层分片，因为四层中TCP协议实现了安全传输，丢失其中任意分片的数据，四层都可以重新传输，从而大大降低因为丢包导致整个数据需要重新传输的代价。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mtu-3"><p>TCP滑动窗口用来告知发送方接收端缓存大小，控制发送端发送的速度，可以简单的理解为: 接收端告诉发送端我还有多少缓冲空间可以使用，你发送的数据量不要超过我的缓冲空间。必须明白的是窗口和MUT、MSS没有任何关系，MTU和MSS用来控制每次传输单元长度，滑动窗口用来协商双方发送数据量问题。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mtu-4"><p>在上面的偏移量<a href="#数据偏移详解">数据偏移详解</a>中可以得知，一个TCP头部最小为20个字节，同样的一个IP头部也占用20个字节，如果每次传输的数据量太小，比如每次传输只有1个字节, IP头部长度20个字节，假设TCP头部长度也是20字节，那么在一次传输中一共要传输41个字节，这对于网络来说是一种巨大的浪费。如果在传输数据时以大量小包方式传输，整个网络宽带就会被挤占， 同时接受和发送端所在的操作系统也不得不处理每一个数据包(这种<a href="https://blog.csdn.net/realmardrid/article/details/122857586">攻击手法</a>也是众多DDOS攻击手法中的一种常见攻击方式)。 为了增加网络吞吐量，一般操作系统都有相应的算法优化小包发送方式, 以Linux中的<a href="https://zh.m.wikipedia.org/zh/%E7%B4%8D%E6%A0%BC%E7%AE%97%E6%B3%95">Nagle</a>为例, 优化小包规则如下:</p><ul><li>如果数据包长度达到了MSS, 则允许发送缓冲区数据;</li><li>如果数据包中含有FIN标志，则允许发送缓冲区数据;</li><li>如果设置了TCP_NODELAY选项，则允许发送缓冲区数据;</li><li>没有设置TCP_CORK选项，并且所有发出去的包都被确认，则允许发送缓冲区数据;</li><li>数据已经缓冲区等待了一定的时间(一般是200ms)，则允许发送缓冲区数据;</li><li>数据被标记为紧急数据，则允许发送缓冲区数据;</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>综上来说，<code>PSH标记</code>是为了告知TCP模块不要再等待缓冲区数据写入或者继续等待发送周期，而是直接将数据发送(发送方)或者将数据推送给上层应用程序(接受方)。<br>对于发送方来说，一般每一次使用<code>write</code>方法写入数据到缓冲区，都会将缓冲区的数据打包成一个或者多个TCP报文，并且设置最后一个TCP报文的<code>PSH</code>标志位，从而告知TCP立即发送缓冲区的数据。 对于接受方来说，如果接受到的数据报文中包含<code>PSH</code>标志，则会立即将数据从缓冲区推送给上层应用。</p></li><li><p><span class='p cyan'>RST:</span> 复位标志, 在正常断开一个已连接的TCP会话的情况下，过程需要四次挥手。 但是在异常情况下双方通讯一定存在问题，导致正常的四次挥手这个过程无法正常执行，<code>RST Flag</code>的出现提供了强制关闭连接的一种机制。正常情况下，无论是发送方的数据包还是接收方的数据包中包含<code>RST</code>标记，该TCP会话申请的内存和端口等资源都会被系统释放，对于上层的应用来说，就是TCP连接被关闭了，一般会显示<code>connection reset</code>或者<code>connection refused</code>的错误信息。在目前的操作系统中，为了保证系统内核的安全性，一般是把应用和内核分开，每个应用的内存分为 <code>用户空间</code> 和<code>内核空间</code>。在网络通讯中，客户端和服务端一般都属于应用层，应用层只能通过<code>send/recv</code>的系统调用与内核交互，才能感知到内核的网络会话域是否接受到了<code>RST</code>。 当一端收到了另外一端发送的<code>RST</code>后，内核会认为会话连接已经关闭。如果<code>应用层</code>的应用再次尝试使用<code>recv</code>去读取数据，应用层就会收到<code>Connection reset by peer</code>的错误，表示另外一端已经把连接关闭，如果尝试使用<code>send</code>把数据写入内核缓冲区，应用层就会收到<code>Broken pipe</code>的错误，表示会话已经断开了连接。 下面是几种经常出现<code>RST</code>的情况:</p></li></ul><div class="tabs" id="mtu"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mtu-1">端口不可用</button></li><li class="tab"><button type="button" data-href="#mtu-2">请求超时</button></li><li class="tab"><button type="button" data-href="#mtu-3">套接字设置了l_linger和l_onoff</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mtu-1"><p>端口不可用一般可能是因为端口没有监听过，也有可能是监听端口的应用已经退出，操作系统系统回收掉了应用程序申请的资源。无论是上面的哪种情况，操作系统接收到请求后就会根据请求目的IP和端口遍历操作系统中会话资源, 如果根据IP和端口没有找到指定的对象，一般情况下就会给请求方返回一个包含<code>RST</code>的数据包。但是需要注意的是如果在TCP传输的过程中数据包被篡改，也就是原始数据包发送的<code>校验和</code>和接受到的数据中的<code>校验和</code>不一致，那么TCP报文会被操作系统直接丢弃，不会返回包含<code>RST</code>的数据包。这是一个连<code>校验和</code>检测都没有通过的数据包，多半是有问题的，该数据包大概率是在传输过程中被篡改了，或者是一个伪造的数据包，因为在正常的传输层，一般应用的两种协议中: TCP丢弃<code>检验和</code>有问题的包后，对方长时间收不到<code>ACK</code>回复的情况下会自动尝试重传，另外一种协议UDP本身就是一个不可靠传输协议，如果检测到数据包有问题，就会直接丢弃。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mtu-2"><p>TCP协议中提供了超时选项，如果接收方所在的IP地址能够ping通过，并且端口正常监听，排除防火墙问题，如果在接收到包含<code>RST</code>的数据包，有大概率的问题就是设置了TCP超时选项，当设置了TCP超时选项后并且没有在指定的超时时间内收到数据，此时设置超时的一方就会发送一个<code>RST</code>标志的数据包给对方，表示拒绝对方连接。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mtu-3"><p>正常关闭TCP连接的过程中要经历四次挥手的操作，在应用层调用<code>close()</code>关闭连接时，会发送<code>FIN</code>标志给对方，默认情况下，<code>close()</code>会立马返回，此时内核中的TCP模块负责将缓存区中的数据发送给对方，但是对于应用层来说，无法感知到缓冲区的数据是否发送完成，<code>l_linger</code>选项可以控制应用调用<code>close()</code>之后的行为。</p><ol><li>使用默认的参数情况下，也就是<code>l_onoff</code>为0，<code>l_linger</code>值被忽略，调用<code>close()</code>之后会立即返回给调用者，TCP模块负责发送残留的的缓冲区数据给对方。</li><li>当<code>l_onoff</code>为1, <code>l_linger</code>为0的情况下，TCP回直接丢弃缓冲区数据，并发送<code>RST</code>给对方，此时不会再按照四次挥手关闭连接，同时对方调用<code>recv()</code>也会出现<code>WSAECONNRESET</code>错误。</li><li>当<code>l_onoff</code>为1，<code>l_linger</code>&gt;0，并且socket为阻塞，则调用<code>close()</code>将阻塞<code>l_linger</code>秒时间，如果在<code>l_linger</code>秒内缓冲区数据成功发送,<code>close()</code>将会返回0,如果未能成功发送缓冲区数据,<code>close()</code>返回-1,表示失败, 并将<code>errno</code>设置为EWOILDBLCOK。</li><li>当socket为非阻塞时, <code>close()</code>将立即返回，需要根据<code>close()</code>返回值以及<code>errno</code>来判断TCP缓冲区是否发送成功。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>需要注意的是，传输过程中如果出现数据包错误错误是不会发送<code>RST</code>标志的，也就是原始数据包发送的<code>校验和</code>和接受到的数据中的<code>校验和</code>不一致，那么TCP报文会被操作系统直接丢弃，不会返回包含<code>RST</code>的数据包。这是一个连<code>校验和</code>检测都没有通过的数据包，多半是有问题的，该数据包大概率是在传输过程中被篡改了，或者是一个伪造的数据包，因为在正常的传输层，一般应用的两种协议中: TCP丢弃<code>检验和</code>有问题的包后，对方长时间收不到<code>ACK</code>回复的情况下会自动尝试重传，另外一种协议UDP本身就是一个不可靠传输协议，如果检测到数据包有问题，就会直接丢弃。</p><ul><li><span class='p blue'>SYN:</span> SYN(Synchronize Sequence Numbers)被程序同步序号编号，该Flag用于初始化TCP连接，TCP连接可以理解为于远程的机器建立一个虚拟电路(类似于二层中设备通过物理电路连接)， 当客户端发起对服务端连接时，会在数据包中设置<code>SYN</code>标记，服务端回复的包中也会设置<code>SYN</code>标记，最后客户端回复给服务端中的不再设置<code>SYN</code>标记，此时三次握手结束(后面我会单独写一篇文章介绍TCP中的三次握手和四次挥手)。</li></ul><p>与该标记相关的一种攻击手法就是<code>SYN Flood攻击</code>，也被称为<code>SYN洪水攻击</code>，原理就是描述就是: 客服端向服务端连接请求，此时数据报文中的<code>SYN</code>标记被设置，服务端返回一个包含SYN+ACK的报文给客户端，并等待客户端再次发送包含<code>ACK</code>标记的报文等待完成三次握手这个过程，此时如果客户端不回复<code>ACK</code>报文，则服务端会认为之前发出的报文丢失，并且会重新发送一遍包含<code>SYN+ACK</code>的报文返回客户端并等待一端时间，如果等待后仍然没有收到客户端发来包含<code>ACK</code>标记的报文，服务端就会丢弃这个未完成的连接，中间等待的这段时间被称为<code>SYN Timeout</code>,一般来说等待的这段时间是分钟数量级别的，如果一个系统存在这种大量的<code>半连接</code>，就不得不花大量的资源维护在操作系统中，加上服务端不断的对<code>半链接</code>进行回复重试，服务端的负载最终将会变得异常巨大，此时由于服务器忙于维持这种半连接会无暇理睬正常用户的请求或者响应客户请求很慢，从正常请求的的用户来看，服务端就是响应缓慢或者无响应。  </p><p>另外一种对<code>SYN</code>常见的用法就是<code>SYN扫描</code>, 正常扫描端口是客户端和服务端之间建立一个连接(完成三次握手)来判断目标是否开启了指定端口，正常三次握手之后，服务端应用能够获取到客户端的信息，如果服务端发现某个客户端进行大量的不同端口的连接就可以非常简单的判断是否有扫描器在扫描自己。但是客户端在发送SYN请求到服务端之后，可以直接根据服务端返回的响应信息是<code>RST</code>还是<code>SYN+ACK</code>就可以判断出目标端口是否存活，不需要完成三次握手过程。此时客户端在服务端响应后直接发送<code>RST</code>标记的数据包返回给服务端结束连接就可以了，此过程中上层应用无法感知到是否存在客户端连接, 比如Nmap扫描器就支持<a href="https://nmap.org/man/zh/man-port-scanning-techniques.html">SYN扫描</a>。</p><ul><li><span class='p yellow'>FIN:</span> FIN Flag表示连接终止符，用于四次挥手这个过程，建立一个连接需要三次握手，断开一个连接需要四次挥手。和上面三次握手中，TCP提供了<code>半连接(half-open)</code>的特性一样，TCP关闭连接同样提供了<code>半关闭(half-close)</code>的特性, <code>半关闭</code>这个特性主要是为了解决在TCP中的一端关闭掉发送数据之后还能继续接收对端发送数据的能力，下面是简单的四次挥手过程(后面我会写一篇详细的文章介绍三次握手和四次挥手):</li></ul><ol><li>客户端发送一个<code>FIN报文</code>, 并且停止再次发送数据，并且客户端此时处于<code>FIN-WAIT1</code>的状态，等待服务端来确认。</li><li>服务端收到<code>FIN报文</code>后，会响应<code>ACK</code>报文，表示已经收到客户端要关闭连接的的报文了，服务端此时处于<code>CLOSE-WAIT</code>状态。</li><li>客户端收到服务端<code>ACK</code>报文后，进入到<code>FIN-WAIT2</code>的状态，等待服务端最终确认关闭连接。</li><li>如果服务端想要断开连接(不再向客户端发送数据)，此时服务端也向客户端发送一个<code>FIN报文</code>, 此时服务端处于一个<code>LAST-ACK</code>的状态，等待客户端的确认。</li><li>客户端收到服务端的<code>FIN报文</code>后，也会一样发送一个ACK报文作为应答，此时客户端处于<code>TIMNE-WAIT</code>状态，并在计时器指定时间周期后关闭连接，服务端收到ACK报文后也将关闭连接。</li></ol><h3 id="扩展标标志位"><a href="#扩展标标志位" class="headerlink" title="扩展标标志位"></a>扩展标标志位</h3><div class="note success flat"><p>在2001年9月的<code>RFC3168</code>的文档中启用了3位TCP保留位，实现了显示拥塞通知。</p></div><p>还记得前面图中TCP头部保留字段保留了6位么？<a href="#头部格式说明">TCP头部</a>。在2001年9月的<code>RFC3168</code>中定义了新版的TCP头部(该头部兼容老版头部定义)。新版本的头部使用了保留字段中的三位用来扩展TCP协议。新增加了<code>NS</code>, <code>CWR</code>, <code>ECE</code>标志位。这三个标志位需要一起配合使用，简称<code>ECN</code>，三个标志位定义位置如图所示:<img src="/images/tcppacket/extend-tcpheader.png" alt="TCP头部扩展"><br><code>ECN(Explicit Congestion Notification)</code>简称显示拥塞通知，支持端到端的网络拥塞通知。<br>在通常情况下，一旦网络中出现拥塞，TCP/IP会主动丢弃数据包，源端检测到丢包后就会减小拥塞窗口，降低传输速率，如果端到端能够成功协商<code>ECN</code>的话。支持<code>ECN</code>的路由器就可以在发生拥塞时在IP报头中设置一个标记，发出一个即将拥塞的信号，而不是直接丢弃数据包。<code>ENC</code>减少了TCP的丢包数量，通过避免重传，较少了延迟(尤其是抖动), 提升了网络传输效率。由于<code>ENC</code>定义比较复杂，我后面会写一篇新的文章来介绍<code>ECN</code>。</p><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><div class="note success flat"><p>滑动窗口告知发送方接收方还能接受最大的数据量，后面我会单独写一篇文章介绍介绍TCP中的滑动窗口。</p></div><p>每个TCP会话中，无论接收方还是发送方，系统都初始化了一块内存区域来保存接收或者发送的数据。我们一般叫这块内存区域为内存缓冲区。  </p><p>在TCP会话中，发送方接收到另外一方发送的数据之后，会回复<code>ACK</code>响应，然后发送方继续发送一下一个数据包。但是这种效率明显会很低效，第一个原因是考虑到发送端需要在每次在发送数据之后等待接收端的<code>ACK</code>确认，确认也是需要网络延时成本的。第二个原因就是如果接收端接收到数据后所在主机如果忙于处理其他事情有可能会导致<code>ACK</code>不能及时回复。  </p><p>鉴于这种情况，TCP引入了<code>窗口</code>的概念，<code>窗口大小</code>就是指：无需等待接受端<code>ACK</code>恢复，可以继续发送数据量的最大值。前面说到了，在每个TCP会话中，系统都会初始化一块内存用来保存接收和发送的数据，<code>窗口大小</code>就是系统中这块内存剩余的空间，对于发送方来说，通过得知对方的<code>窗口大小</code>就可以知道还能发送给接收方的的最大数据量是多少。如果尝试发送数据量大于接收方的内存缓冲区，则接收方会丢弃掉该来自于接收方的数据。 对于发送方来说，发送缓存也是一块内存区域，该内存也有大小。 如果尝试写入的数据量大于该内存空间大小, 会导致上层应用的<code>send()</code>方法一直处于阻塞状态。  </p><p>另外需要注意的是，发送方发送的数据虽然可以在<code>ACK</code>确认之前多次发送，但是已发送的数据在收到对应<code>ACK</code>确认之前仍然会保留在内存缓冲区，在按期收到<code>ACK</code>确认之后，数据就可以缓冲区清除。  </p><p>另外TCP支持<code>累计确认</code>，比如发送方发送了数据为: 100-199, 200-299, 300-399 这三段数据，只要接受方回复了<code>ACK</code>为400的结果，就认为 100-199, 200-299, 300-399这三段数据已经全部发送成功。</p><h3 id="TCP校验和"><a href="#TCP校验和" class="headerlink" title="TCP校验和"></a>TCP校验和</h3><p>TCP校验和属于端到端的一种校验方式，发送的每个数据包都由发送端计算出校验和，然后放在TCP头部，然后接收端接收到数据之后再次计算校验和是否一致，如果TCP会话中发送的数据包在中途被修改过，接收端会直接丢弃TCP报文。 TCP校验和校验包含IP的首部信息，然后把伪首部、TCP报头、TCP数据化为2个字节长度，如果总字节总长度为奇数，那么就在最后添加一个每位位都为0的字节。需要注意的是TCP报头中包含校验码信息，在计算校验和的过程中，校验码每位都是0，否则会陷入校验码计算的逻辑混乱中。</p><p>伪首部需要依赖三层数据报头中的信息，包括: 源IP地址(32位)、目的IP地址(32位)、保留字节(8位)、传输协议(8位)、TCP报文长度(包含报头+数据)。之所以TCP校验和用到三层的内容，主要是为了进一步TCP校验和的检错能力，因为有了伪首部的参与，TCP校验和相当于增加了对源和目的IP地址、传输协议等内容的检测, 这里简单说明一下校验和就算过程:</p><ol><li>计算伪首部数据: 源和目的IP地址 + 保留字节 + 传输协议 + TCP报文长度。</li><li>计算TCP头部数据: TCP头部(TCP头部的checksum要全部置为0计算)。</li><li>计算TCP Playload真实传输的数据。</li><li>数据相加计算: 伪首部计算值 + TCP头部计算值 + TCP数据计算。</li><li>如果相加值大于FFFF，则使用高16位和低16位相加，直到高16位都为0。</li><li>计算结果按位取反。</li></ol><h3 id="TCP可选项"><a href="#TCP可选项" class="headerlink" title="TCP可选项"></a>TCP可选项</h3><p>TCP提供了可选项来增加TCP报文的描述信息，可选项区域长度是可变长度，范围为:<code>0-40字节</code>, 在<a href="#数据偏移详解">数据偏移详解</a>中指定了可选项区域的长度，<code>数据偏移</code>每个位都都可以表示4个字节，所以可选项和填充位只能是<code>32倍数</code>位。<img src="/images/tcppacket/options.png" alt="TCP可选项"><br>每个可选项下都有一个<code>Kind标志位</code>来标记选项类型</p><h4 id="EOL可选项"><a href="#EOL可选项" class="headerlink" title="EOL可选项"></a>EOL可选项</h4><div class="note success flat"><p>可选项的二进制为: <code>00000000</code>。</p></div><p>End of Option List标志位简称<code>EOL</code>, 用来表示选项列表的结尾。还记的<code>数据偏移详解么</code>? 数据偏移中每个位都表示<code>4个字节</code>, 也就是<code>32位</code>, 如果TCP可选项中的长度不满足是32位的倍数。可以使用<code>EOL</code>可选项填充。该标志位只包含<code>Kind</code>标识，长度为<code>1个字节</code>, 用来表示TCP可选项结束。当TCP包头可选项区域结束后没有与<code>数据偏移</code>指定的偏移量结束时才会需要使用<code>EOL</code>选项。除此之外，<code>EOL</code>可选项不一定是在TCP可选项的末尾，比如指定TCP头部长度为40个字节，其中第39bytes是<code>EOL</code>标识符，根据<code>RFC793</code>协议规范，可以指定0来填充第40个bytes, 对于第40个bytes已经不再属于TCP可选项的一部分了。</p><h4 id="NOP可选项"><a href="#NOP可选项" class="headerlink" title="NOP可选项"></a>NOP可选项</h4><div class="note success flat"><p>可选项的二进制为: <code>00000001</code>。</p></div><p> <code>No Operation</code>标志位简称<code>NOP</code>, 该选项可以用在选项之间或者结尾处，比如可选项<code>WSOPT</code>长度为3个字节，也就是<code>24</code>位， 为了使<code>WSOPT</code>更容易对齐，可以在<code>WSOPT</code>之前添加<code>NOP</code>做填充, 保证<code>WSOPT</code>域为<code>4bytes</code>。但是在<code>RCF793</code>协议中规定，发送端不一定会保证会填充<code>NOP</code>来保证选项的对齐，因此接收端必须支持接受非填充的可选项。在TCP选项中，选项顺序除了<code>EOL</code>需要声明在结尾处外，其他顺序并不是固定的，除此之外由于<code>NOP</code>标志位的加入，每个标志位有可能是使用<code>NOP</code>填充之后的长度，也有可能是使用<code>NOP</code>填充之后的对齐长度。</p><p> 标志位是否会使用<code>NOP</code>填充取决于操作系统对TCP栈的实现，比如在Linux操作系统中, 如果TCP的可选项不满足<code>32位</code>倍数长度，在发送数据时并不会使用<code>EOL</code>填充结尾，而是使用一个或者多个<code>NOP</code>填充并且实现TCP头部可选项<code>32位</code>对齐，另外虽然<code>RFC协议</code>没有规定TCP头部可选项的顺序, 但是Linux在TCP栈实现上会按照一定顺序排列TCP选项，其中的原因就是虽然<code>RCF协议</code>虽然没有规定顺序，但是会有一些设备对TCP可选项顺序是比较敏感的，可选项的顺序有可能导致TCP通讯异常。</p><h4 id="MSS可选项"><a href="#MSS可选项" class="headerlink" title="MSS可选项"></a>MSS可选项</h4><div class="note success flat"><p>可选项的二进制为: <code>00000010</code>, 长度标志为<code>00000100</code>, 长度为4。</p></div><p><code>Max Segment Size</code>简称<code>MSS</code>是TCP希望从对端收到最大报文的长度。这边需要注意的是MSS指示TCP数据长度，不包含关联的TCP头部的长度。在三次握手阶段，在包含<code>SYN</code>标志的握手包中的可选项区域都包含<code>MSS</code>标志来告知对方自己的<code>MSS</code>标志，因为在三次握手阶段无论是客户端还是服务端都会发送带有<code>SYN</code>的数据包, 所以双方在握手阶段就可以知道对方的<code>MSS</code>的大小，但是<code>MSS</code>是可选项，所以RFC1122规定如果没有<code>MSS</code>可选项的话，则会默认使用<code>536字节</code>作为<code>MSS</code>的大小, 但是需要注意的是目前网卡几乎都支持<code>TSO</code>、<code>GSO</code>功能，在网卡开启这些功能的前提下，协议栈中的TCP层可能会按照<code>MSS</code>的整数倍发送数据包，然后网卡会再次对TCP数据包分段，这样做的目的是减轻<code>CPU</code>的处理压力。RFC6691协议重新声明了<code>MSS选项</code>的相关说明，该协议明确说明了<code>MSS</code>的值为<code>MTU-IP包头-TCP基本包头(不包含可选项)</code>。发送端在负责发送数据之前<code>扣除TCP可选项</code>长度并得到真实传输数据的长度。</p><h4 id="WSOPT可选项"><a href="#WSOPT可选项" class="headerlink" title="WSOPT可选项"></a>WSOPT可选项</h4><div class="note success flat"><p>可选项的二进制为: <code>00000011</code>, 长度标志为<code>00000011</code>, 长度为3。</p></div><p>TCP中有一种连接叫做<code>长肥管道</code>，简称<code>LFN(Long Fat Networks)</code>所谓的长肥管道就是建立的TCP的会话中物理带宽很大，而且<code>RTT</code>也很大的会话，计算公式为:<code>BDP = RTT * BandWidth</code>。由于TCP协议栈的拥塞控制实现算法限制，这种<code>长肥管道</code>最终传输数据效率很低(后面我会详细写一篇文章介绍长肥管道，并且介绍如何最大化利用长肥管道)。默认拥塞控制算法对缓冲区要求比较高(Google于2016年提出BBR拥塞控制算法，对解决长肥管道很有帮助，Youtube应用了BBR算法，Youtube网络全球吞吐量提升了4%)。一般来说操作系统分配的会话缓冲区要大于<code>窗口</code>的大小，但是TCP头部中已经限制了<code>窗口</code>最大值为<code>65535</code>， 基于此RFC1323中为长肥管道提供了两个高性能扩展， 包括<code>WSOPT</code>和<code>TSOPT</code>选项，这两个选项可以通知会话双方真正的<code>窗口</code>大小。</p><p>当TCP会话一端需要通知对方需要更大的接收窗口时，就会使用<code>WSOPT</code>选项, 当使用<code>WSOPT</code>选项时，接收端实际的接收窗口为<code>Window Size&lt;&lt;shift.cnt</code>, 其中按照RCF协议规定，<code>shift.cnt</code>的最大值为14，当<code>shift.cnt</code>超过14之后，则按照最大14来处理。 使用<code>WSOPT</code>选项来扩展<code>窗口大小</code>, 被称为<code>Window Sclae</code>, <code>WSOPT</code>选项可以把<code>窗口</code>的大小由原来的<code>16位</code>扩展到<code>30位</code>，此时<code>窗口大小</code>大约可以表示容量为1G。提升<code>窗口大小</code>可以有效提升长肥网络的性能传输效率。</p><p>需要注意的是，如果要使用<code>Windows Scale</code>特性，需要在发送端的<code>SYN</code>包中使用<code>WSOPT</code>选项，接收端在回复<code>SYN-ACK</code>的数据包中同样需要发送<code>WSOPT</code>选项，需要注意的是在协商<code>Window Scale</code>的过程中，不能对<code>SYN</code>和<code>SYN-ACK</code>报文中<code>窗口大小</code>应用<code>WSOPT</code>选项。<code>WSOPT</code>中的<code>shift.cnt</code>可以为0，标识<code>Window Scale Factor</code>为1(2^0=1), 表示TCP头部中<code>Windows Size</code>就是实际<code>接收窗口</code>的大小, 表示不对<code>Windows Size</code>进行扩充。 并且一定需要注意的是，如果只有一方发送了<code>WSOPT</code>选项，但是没有接收到对端返回的<code>WSOPT</code>选项，表示协商无效，此时发送端仍然需要将<code>Window Scale Factor设置为1，表示TCP头部中</code>Windows Size就是实际<code>接收窗口</code>的大小。<br><img src="/images/tcppacket/WSOPT.png" alt="&quot;通讯双方WSOPT选项&quot;"><br>在上面的图中，展示了发送端和接收端都有各自的<code>接口窗口</code>和<code>发送窗口</code>，因此一个有效的会话中，一共有4个<code>Window Scale Factor</code>。假设发送端接受窗口<code>Window Scale Factor</code>为<code>R</code>,发送窗口<code>Window Scale Factor</code>为<code>S</code>, 则对应接收端窗口<code>Window Scale Factor</code>为<code>R</code>, 发送端窗口<code>Window Scale Factor</code>为<code>S</code>。 在TCP通讯双方在协商好<code>Window Scale Factor</code>之后， 之后数据包中<code>窗口大小</code>字段将自动进行<code>Window Scale</code>, 发送的数据包中的<code>窗口大小</code>实际为<code>接收窗口</code>右移<code>Sclae Factor</code>之后的结果。</p><h4 id="SACK-Permitted和SACK选项"><a href="#SACK-Permitted和SACK选项" class="headerlink" title="SACK-Permitted和SACK选项"></a>SACK-Permitted和SACK选项</h4><div class="note success flat"><p>SACK-Permitted可选项标识为: <code>00000100</code>，长度为2字节。<br>SACK可选项标识为:<code>00000101</code>，长度不固定，长度为变量。</p></div><p>从之前的TCP通讯机制中可以得知，接收端是通过<code>ACK标识</code>来通知发送端已经成功接受到数据包，并且TCP支持累计确认机制。但是在实际的网络中，由于网络的不稳定性，导致数据包在传输过程中存在乱序传输或丢包的现象。比如在传输过程中，发送端发送了<code>100-200</code>的数据包，并且接收端成功接受该数据。紧接着发送端发送了<code>201-300</code>和<code>301-400</code>的数据包，但是由于网络丢包的问题接收端只收到了<code>301-400</code>的包, 并没有接收到<code>201-300</code>的数据包。也就是说接收端缺少了<code>201-300</code>的数据包，这种接收端区间丢失数据的情况被称为滑动窗口出现了<code>洞(hole)</code>, 比如下面的图片展示了TCP滑动窗口中的<code>洞</code>:<img src="/images/tcppacket/hole.png" alt="TCP滑动窗口洞"><br>接着上面的例子继续说下去，此时服务端返回ACK报文时只能回复<code>201</code>，表示期望发送端发送编号从<code>201</code>开始的数据。对于发送端来说，除了要发送<code>201-300</code>的数据包之外，还需要发送<code>301-400</code>的数据包，这样会造成数据包重复传输，如果使用<code>SACK</code>可选项的话，接收端可以通过<code>SACK</code>通知发送端已经收到了<code>301-400</code>的数据包，告知客户端的<code>301-400</code>的数据包已经收到的元描述信息被称为<code>SACK块(SACK Block)</code>, 一个SACK可选项可以包含多个<code>SACK块</code>, 对于发送客户端来说，解析<code>SACK</code>数据并结合<code>ACK number</code>就可以计算出需要重传数据包(这里是:201-300)，而不需要全部重传。这样会大大提升TCP传输效率。</p><p>需要注意的是通讯双方需要协商确认是否使用<code>SACK</code>选项。而且<code>SACK</code>选项在<code>握手阶段</code>就需要确认，客户端在和服务端发起握手的<code>SYN</code>包中的可选项中声明<code>SACK-Permitted</code>选项，表示客户端支持<code>SACK</code>选项，同样的在服务端回复的<code>SYN+ACK</code>数据包中回复<code>SACK-Permitted</code>数据包。表示双方协商通过，可以使用<code>SACK</code>选项。Linux内核选项<code>/proc/sys/net/ipv4/tcp_sack</code>默认是开启状态。</p><h4 id="TSOPT选项"><a href="#TSOPT选项" class="headerlink" title="TSOPT选项"></a>TSOPT选项</h4><div class="note success flat"><p>TSOPT可选项标识为: <code>00001000</code>, 长度为10个字节。格式如下:</p><pre><code class="lang-text">+-------+-------+---------------------+---------------------+|Kind=8 |  10   |   TS Value (TSval)  |TS Echo Reply (TSecr)|+-------+-------+---------------------+---------------------+1       1              4                     4</code></pre></div><p><code>TSOPT选项</code>也叫做<code>timestamp</code>选项，有时候会被简称为<code>TSopt</code>。和上面的<code>WSOPT</code>可选项一样。在RCF1323中为了改善<code>长肥管道</code>同样提出了<code>TSOPT</code>选项。当启用<code>TSOPT</code>选项时,发送方会在<code>TSval</code>字段设置一个时间戳，接受方会在<code>TSecr</code>字段将发送的时间戳返回回来。因为在接收端不会处理这个<code>TSval</code>而是直接从<code>TSecr</code>返回，因此在使用该选项时，通讯的双方并不需要做时间同步。发送的时间戳一般是单调增的值, RCF1323建议每秒增加1。在三次握手阶段<code>SYN</code>包因为无法获取对端的时间戳信息<code>TSecr</code>会默认使用<code>0</code>填充，<code>TSval</code>使用自己的时间戳填充。Linux内核选项<code>/proc/sys/net/ipv4/tcp_timestamps</code>可以设置是否启用TSOPT选项。</p><p><code>TSOPT</code>选项包含两个用途，其中一个用途是根据ACK报文返回的<code>TSOPT</code>选项测量往返延时，简称<code>RTTM(round-trip time measurement)</code>。另外一个重要的用途就是上面前面提到的:防止TCP序列号复用问题(<code>PAWS</code>), 除了这两个重要的用途之外还用于实现<code>SYN-Cookie</code>、<code>Eifel Detection Algorithm</code>等功能。</p><p>RCF7323文档中规定: TCP头部中的<code>ACK</code>标志位有效时<code>TSecr</code>才有效， 如果<code>ACK</code>标志位没有设置，发送端应该把<code>TSecr</code>设置为0。当发送的数据包中设置<code>ACK</code>标志位的情况下，发送方必须在<code>TSecr</code>中设置最后一个收到的<code>TSval</code>, 如果<code>ACK</code>标志位没有设置，接收方必须忽略<code>TSecr</code>字段。</p><p>在一个TCP会话中，<code>TSOPT</code>选项可以在<code>SYN</code>包中被发送，接收端在接收到<code>SYN</code>报文中解析到<code>TSOPT</code>选项时才会在<code>SYN-ACK</code>报文中回复<code>TSOPT</code>选项。一旦TCP会话中双方通过<code>SYN</code>和<code>SYN-ACK</code>报文中协商好<code>TSOPT</code>选项之后，除非是包含<code>RST</code>标志的报文，否则<code>TSOPT</code>必须在会话中发送。 如果一个会话在协商好<code>TSOPT</code>选项后但是接受到的报文中不包含<code>TSOPT</code>选项，文档中规定应该丢弃报文(Linux在TCP协议栈实现上没有丢弃报文)。</p><p>TCP连接中有一种情况是通讯的双方都会发送<code>SYN</code>握手包，这种情况叫做<code>同开</code>。虽然这种情况很少，但是也是存在的，比如<code>NAT穿透</code>中这种情况会比较多(后面我会写一篇文章介绍TCP<code>同开</code>和<code>同关</code>)。这种情况下可以在两端在回复报文<code>SYN-ACK</code>中包含<code>TSOPT</code>选项。</p>]]></content>
      
      
      <categories>
          
          <category> network </category>
          
          <category> tcp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> 网络 </tag>
            
            <tag> 系统 </tag>
            
            <tag> 数据包 </tag>
            
            <tag> 分析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
